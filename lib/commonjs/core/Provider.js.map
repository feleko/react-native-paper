{"version":3,"sources":["Provider.tsx"],"names":["Provider","props","colorSchemeName","theme","Appearance","getColorScheme","reduceMotionEnabled","setReduceMotionEnabled","React","useState","colorScheme","setColorScheme","handleAppearanceChange","preferences","useEffect","subscription","AccessibilityInfo","addEventListener","remove","removeEventListener","addChangeListener","removeChangeListener","getTheme","providedTheme","DarkTheme","DefaultTheme","animation","scale","children","settings","icon","MaterialCommunityIcon"],"mappings":";;;;;;;AAAA;;AACA;;AAMA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAQA,MAAMA,QAAQ,GAAG,CAAC,EAAE,GAAGC;AAAL,CAAD,KAAyB;AACxC,QAAMC,eAAe,GAClB,CAACD,KAAK,CAACE,KAAP,KAAgBC,uBAAhB,aAAgBA,uBAAhB,uBAAgBA,wBAAYC,cAAZ,EAAhB,CAAD,IAAkD,OADpD;AAGA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDC,KAAK,CAACC,QAAN,CACpD,KADoD,CAAtD;AAGA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCH,KAAK,CAACC,QAAN,CACpCP,eADoC,CAAtC;;AAIA,QAAMU,sBAAsB,GAC1BC,WAD6B,IAE1B;AACH,UAAM;AAAEH,MAAAA;AAAF,QAAkBG,WAAxB;AACAF,IAAAA,cAAc,CAACD,WAAD,CAAd;AACD,GALD;;AAOAF,EAAAA,KAAK,CAACM,SAAN,CAAgB,MAAM;AACpB,QAAIC,YAAJ;;AAEA,QAAI,CAACd,KAAK,CAACE,KAAX,EAAkB;AAChBY,MAAAA,YAAY,GAAGC,+BAAkBC,gBAAlB,CACb,qBADa,EAEbV,sBAFa,CAAf;AAID;;AACD,WAAO,MAAM;AACX,UAAI,CAACN,KAAK,CAACE,KAAX,EAAkB;AAAA;;AAChB,6BAAIY,YAAJ,0CAAI,cAAcG,MAAlB,EAA0B;AACxBH,UAAAA,YAAY,CAACG,MAAb;AACD,SAFD,MAEO;AACLF,yCAAkBG,mBAAlB,CACE,qBADF,EAEEZ,sBAFF;AAID;AACF;AACF,KAXD;AAYD,GArBD,EAqBG,CAACN,KAAK,CAACE,KAAP,CArBH;AAuBAK,EAAAA,KAAK,CAACM,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACb,KAAK,CAACE,KAAX,EAAkBC,0GAAYgB,iBAAZ,CAA8BR,sBAA9B;AAClB,WAAO,MAAM;AACX,UAAI,CAACX,KAAK,CAACE,KAAX,EACEC,0GAAYiB,oBAAZ,CAAiCT,sBAAjC;AACH,KAHD;AAID,GAND,EAMG,CAACX,KAAK,CAACE,KAAP,CANH;;AAQA,QAAMmB,QAAQ,GAAG,MAAM;AACrB,UAAM;AAAEnB,MAAAA,KAAK,EAAEoB;AAAT,QAA2BtB,KAAjC;;AAEA,QAAIsB,aAAJ,EAAmB;AACjB,aAAOA,aAAP;AACD,KAFD,MAEO;AACL,YAAMpB,KAAK,GAAIO,WAAW,KAAK,MAAhB,GACXc,kBADW,GAEXC,qBAFJ;AAIA,aAAO,EACL,GAAGtB,KADE;AAELuB,QAAAA,SAAS,EAAE,EACT,GAAGvB,KAAK,CAACuB,SADA;AAETC,UAAAA,KAAK,EAAErB,mBAAmB,GAAG,CAAH,GAAO;AAFxB;AAFN,OAAP;AAOD;AACF,GAlBD;;AAoBA,QAAM;AAAEsB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyB5B,KAA/B;AACA,sBACE,oBAAC,mBAAD,qBACE,oBAAC,kBAAD;AAAkB,IAAA,KAAK,EAAE4B,QAAQ,IAAI;AAAEC,MAAAA,IAAI,EAAEC;AAAR;AAArC,kBACE,oBAAC,sBAAD;AAAe,IAAA,KAAK,EAAET,QAAQ;AAA9B,KAAmCM,QAAnC,CADF,CADF,CADF;AAOD,CA7ED;;eA+Ee5B,Q","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityInfo,\n  Appearance,\n  ColorSchemeName,\n  NativeEventSubscription,\n} from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider, Settings } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\n\ntype Props = {\n  children: React.ReactNode;\n  theme?: ReactNativePaper.Theme;\n  settings?: Settings;\n};\n\nconst Provider = ({ ...props }: Props) => {\n  const colorSchemeName =\n    (!props.theme && Appearance?.getColorScheme()) || 'light';\n\n  const [reduceMotionEnabled, setReduceMotionEnabled] = React.useState<boolean>(\n    false\n  );\n  const [colorScheme, setColorScheme] = React.useState<ColorSchemeName>(\n    colorSchemeName\n  );\n\n  const handleAppearanceChange = (\n    preferences: Appearance.AppearancePreferences\n  ) => {\n    const { colorScheme } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (!props.theme) {\n      subscription = AccessibilityInfo.addEventListener(\n        'reduceMotionChanged',\n        setReduceMotionEnabled\n      );\n    }\n    return () => {\n      if (!props.theme) {\n        if (subscription?.remove) {\n          subscription.remove();\n        } else {\n          AccessibilityInfo.removeEventListener(\n            'reduceMotionChanged',\n            setReduceMotionEnabled\n          );\n        }\n      }\n    };\n  }, [props.theme]);\n\n  React.useEffect(() => {\n    if (!props.theme) Appearance?.addChangeListener(handleAppearanceChange);\n    return () => {\n      if (!props.theme)\n        Appearance?.removeChangeListener(handleAppearanceChange);\n    };\n  }, [props.theme]);\n\n  const getTheme = () => {\n    const { theme: providedTheme } = props;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = (colorScheme === 'dark'\n        ? DarkTheme\n        : DefaultTheme) as ReactNativePaper.Theme;\n\n      return {\n        ...theme,\n        animation: {\n          ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1,\n        },\n      };\n    }\n  };\n\n  const { children, settings } = props;\n  return (\n    <PortalHost>\n      <SettingsProvider value={settings || { icon: MaterialCommunityIcon }}>\n        <ThemeProvider theme={getTheme()}>{children}</ThemeProvider>\n      </SettingsProvider>\n    </PortalHost>\n  );\n};\n\nexport default Provider;\n"]}